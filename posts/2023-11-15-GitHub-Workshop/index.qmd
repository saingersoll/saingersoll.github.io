---
title: "GitHub Workshop"
description: "GitHub essentials for collaborative workflows and reproducible open sourced projects."
author:
  - name: Sofia Ingersoll
    url: https://saingersoll.github.io/
    affiliation: The 2035 Initiative & Master of Environmental Data Science Program @ The Bren School (UCSB) 
    affiliation-url: https://www.2035initiative.com/
date: 11-15-2023
categories: [Quarto, R, MEDS] # self-defined categories
citation: 
  url: https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/ 
  url: https://ucsb-meds.github.io/meds-install-windows.html/
  url: https://brunj7.github.io/EDS-214-analytical-workflows/day_1.html/
image: GitHub-Logo.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# GitHub Essentials

\*\* Want a navigation tool on the side of the blog post so people can jump to a desired section \*\*

## Terminal Commands (Summary of Code Covered)

Insert a table here with all of the code chunks and descriptions - likely LaTeX

-   `git status`

-   `git add  .`

-   `git clone`

## Creating an Account

If you don\'t already have a GitHub account, go to github.com and create one. Here are helpful considerations for choosing a username:Â [happygitwithr.com/github-acct.html](https://happygitwithr.com/github-acct.html)

## Connecting GitHub to RStudio

You should already have git on your device, but let\'s check for it anyway.

-   Open RStudio

-   In the Terminal, run the following command:

```         
where git
```

-   If after running that you get something that looks like a file path to git on your computer, then you have git installed. For example, that might return something like this (or it could differ a bit): `/usr/local/bin/git`. If you instead get no response at all, you should download & install git from here: [**git-scm.com/downloads**](https://git-scm.com/downloads)

```{=html}
<!-- -->
```
-   In RStudio, open the Terminal. Run the following commands (by pressing Enter after each line), replacing the username (keep the quotation marks!) and email with your username and email used for your GitHub account.

```         
git config --global user.name "Jane Doe" git config --global user.email janedoe@example.com
```

-   Then, in the Terminal run the following, carefully checking that the name and email returned match your GitHub information:

```         
git config --list --global
```

## Creating a Repository

GitHub is an open sourced user-interface

\*\* image of what it looks like to make a repository \*\*

### `.gitignore` Files

#### What is a .gitignore file?

Documentation we do not want to be pushed and made publicly available in GitHub. When making a repository, you are prompted to answer whether or not you would like Git to make one for you automatically.

\*\* Image of selecting .gitignore file example \*\*

#### What Do We Hide and How?

Typically, data sets that are too large are unable to be stored by GitHub. To avoid a catastrophic event where GitHub is overloaded, it is common practice to put the data folder in the `.gitignore` file.

\*\* Image of .gitignore file example \*\*

### `README` Files

At the bottom of every GitHub repository page, reproducible projects include a `README` file that describes the objective of the project, the data sources utilized, and a synopesis of the workflow applied. These can be as creative as you please, through the inclusion of images, hyperlinks, and stylized text.

Here are some examples of various `README` files:

\*\* Image of README file example \*\* \*\* Image of README file example \*\*

#### Licenses 

GitHub provides the option to apply licensing to your repository. There are a collection of licenses available for selection in GitHub when you go to create a repository. Each contains their own specifications regarding the copyright use of the work it is applied to.

\*\* Image of license example \*\*

### Adding Collaborators

Oftentimes you'll find yourself collaborating with a person, or even a team of people on a project. To optimize the project's workflow, it would be most beneficial to add everyone to the project repository as collaborators.

\*\* Image of adding collaborators example \*\*

## Back to the Basics

`git status`

## Reproducible Workflows

The goal of every project is to be well documented and open sourced, so that others may utilize your hard work to drive developments and/or create new deliverables. A way that GitHub allows for the public to do this is through `forking`.

### Forking // Version Control

Forking allows any GitHub user to create a `version control` copy of your repository for them to work with. To ensure the owners receive credit for their work, the original owners GitHub username will be permanently attached to the forked repository.

\*\* image of a forked example \*\*

There are a number of ways to create a local `version control` project using a forked repository.

1.  Through the terminal

    `git clone "copied url"`

2.  Using the gooey interface of RStudio

    \*\* image showing how to \*\*

#### Pull Requests

The new-user may tinker away at the project locally on their device and if they make any influential developments to the project, they may send in a pull request

\*\* image of a pull request example \*\*

### Committing Changes

After working on your project, it's important to always upload your work to GitHub before logging off. You never know when your computer might crash, so it's good practice pushing your progress up to GitHub.

There are 3 simple steps to committing your changes to GitHub

1.  Staging your changes using `git add`

    -   You can select all files that have been edited using the command `git add .`

    -   To select specific files to be staged by calling them `git add filename.filetype`

2.  Locally committing to your edits and creating a message that will be displayed on GitHub using

    `git commit -m "brief description of edits"`

3.  Publishing your changes to your GitHub repository on the internet using `git push`

## Branches

To optimize collaboration and avoid the risk of merge conflicts, branches are the best tool in your box.

1.  Using the Terminal to make a branch:

2.  Using GitHub to make a branch:

\*\* When working with others on a project, always `git pull` before you start a new working session \*\*

#### Merge Request

## Troubleshooting GitHub

GitHub isn't always the friendliest tool and there are a number of things that could go wrong when working with it. Below, we will explore tactics to apply when experiencing issues with your GitHub.

### Merge Conflicts

\*\* When working with others on a project, always `git pull` before you start a new working session \*\*

#### What to do when you've already committed without pushing

#### Pushing Data that's too Large

#### 
